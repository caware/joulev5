function JouleUIController(){ 
    this.errorIds = [];
    this.errorTimeout = 4;
    this.scaleSelection = 'scale';
    
    this.spinVar = {
        lines: 12, // The number of lines to draw
        length: 5, // The length of each line
        width: 2, // The line thickness
        radius: 5, // The radius of the inner circle
        color: '#000', // #rgb or #rrggbb
        speed: 1, // Rounds per second
        trail: 60, // Afterglow percentage
        shadow: false // Whether to render a shadow
    };
    
    this.spinner = null;
    
    this.toggleFilter = function () {
	cvis.chart.filterOn = !cvis.chart.filterOn;
	cvis.chart.redraw();
	$("#filter").toggleClass("success");
    }
    
    this.loadSpin = function(io, callback){
        if (io == "in"){
            this.spinner = new Spinner(this.spinVar).spin();
            //$('#divSpinner').hide();
            $('#loading').append(this.spinner.el);
            $('#loading').fadeIn("fast", callback())
        }
        else if (io == "out"){
            $('#loading').hide();
            this.spinner.stop();
        }
    };
    
    this.treeNodeClick = function(d, useri){

	var returnObj = new Object();
	var options = new Object();
	
	switch (cvis.chart.type) {
	  case "line":
	    if (cvis.tree.selected.length == 10 && !d.selected && d.type != "node") {
		  ui.showError(null, "You have reached the maximum 10 lines", "warning", 1.5, ui);
		  return;
	    }
	    if (cvis.tree.plotLineDesc[d.id].selected) {
	      cvis.tree.selected.length > 1 ? cvis.tree.plotLineDesc[d.id].selected = false : ui.showError(null, "At least one sensor has to be selected", "warning", 1, ui);
	    } else {
	      cvis.tree.plotLineDesc[d.id].selected = true;
	      returnObj.result = cvis.data.loadMeterData(cvis.data.getMeterNames()).result;
	    }
	    break;
	  case "sankey":
	    if (d.id)
	    options = {
	      "rootId" : d.id,
	      "maxDepth" : 5,// get from ui
	    };
	    break;
	  default:
	    return;
	}
	
	cvis.tree.selected = _.filter(cvis.tree.plotLineDesc, function(d) { return d.selected; });
	cvis.data.plot(options);

	return returnObj;
	
    };
    
    this.graph = function(button, type) {
      
	$(button).hasClass("btn-success") ? null : $(button).toggleClass("btn-success", true).toggleClass("btn-default", false).siblings().toggleClass("btn-default", true).toggleClass("btn-success", false);
	
	switch (type) {
	  case "line":
	    if (cvis.chart.type == "line") return;
	    cvis.chart.changing = true;
	    cvis.chart.type = "line";
	    cvis.data.resetSelection();
	    cvis.chart.treeUpdate();
	    cvis.data.plot();
	    break;
	  case "sankey":
	    if (cvis.chart.type == "sankey") return;
	    cvis.chart.changing = true;
	    cvis.chart.type = "sankey";
	    cvis.data.sankeyTree();
	    cvis.chart.draw();
	    break;
	}
      
    }
    
    this.jouleCarbonToggle = function (button){

	switch (cvis.data.metricType) {
	  case "power":
	    cvis.data.metricType = "carbon";
	    $(button).text("Change to Power");
	    $('#charttitle h1').html('CO<sub>2</sub> (g/s)');
	    break;
	  case "carbon":
	    cvis.data.metricType = "power";
	    $(button).text("Change to Carbon");
            $('#charttitle h1').text('Power (kW)');
	    break;
	  default:
	    return;
	}
	
	cvis.data.invalidatePlotLines();
	cvis.data.plot();
	
    }

    this.addMonth = function(useri){
        this.loadSpin("in", function(){
	  console.log("INCREASE RANGE");
            cvis.data.changeRange(-1);
            useri.loadSpin("out");
        });
    };
    
    this.removeMonth = function(useri){
        this.loadSpin("in", function(){
	    console.log("DECREASE RANGE");
            cvis.data.changeRange(1);
            useri.loadSpin("out");
        });
    };
        
    this.jouleFinishedLoading = function(useri, uiType){
      $("button").click(function(e) { e.preventDefault(); });  
      this.loadSpin("in", function(){
	    cvis.data.chart.tree();
	    cvis.data.plot();
            useri.loadSpin("out");
        });
    };
    
    this.jouleStopLoading = function(useri){
        useri.loadSpin("out");
    };
        
    this.jouleScaleSelectionToggle = function(useri, scaleType){
      
      $('#scaleAllButton').toggleClass('btn-success', scaleType == 'all');
      $('#scaleSelectionButton').toggleClass('btn-success', scaleType =='scale');
      $('#zoomButton').toggleClass('btn-success', scaleType =='zoom');
      $('#scaleAllButton').toggleClass('btn-default', scaleType != 'all');
      $('#scaleSelectionButton').toggleClass('btn-default', scaleType !='scale');
      $('#zoomButton').toggleClass('btn-default', scaleType != 'zoom');
      
      switch (scaleType) {
          case 'all': 
            this.scaleSelection = 'all';
            break;
          case 'scale':
            this.scaleSelection = 'scale';
            break;
          case 'zoom':
            this.scaleSelection = 'zoom';
            break;
	  default:
	    this.scaleSelection = 'scale';
        }
        cvis.data.plot();
	
    };
       
    this.showError = function(error, errorText, errorType, timeout, useri){
        var id = new Date().getTime().toString();
        var genHTML = "<div class='alert alert-" + errorType + "' id='" + id + "'><strong>";
        switch(errorType) {
          case "warning":
            genHTML += "Warning: ";
            break;
          case "danger":
            genHTML += "Error: ";
            break;
          case "success":
            genHTML += "Success: ";
            break;
          case "info":
            genHTML += "Info: ";
            break;
        }
        genHTML += "</strong>" + errorText + "</div>";
        $('#alert-bar').prepend(genHTML);
        var time = timeout*1000;
        var t = setTimeout('ui.hideError('+id+')', time);
    };
    
    this.hideError = function(id){
        jQid = '#'+id;
        $(jQid).hide("fast", function(){
            $(jQid).remove();
        });
    };
    
    this.catchError = function(useri, call, arg){
        var obj = call(arg);
        if (obj.error) {
            useri.showError(obj.error, obj.errorText, obj.errorType, useri.errorTimeout, useri);
        }
        return obj.result;
    };
}